generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String                   @id
  email       String                   @unique
  username    String                   @unique
  displayName String?
  img         String?
  cover       String?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  histories   ProductLocationHistory[]
}

model Images {
  ean   String @id @unique
  image String
}

model Labels {
  order       String  @id @unique
  Name        String
  Address     String
  orderItemId String
  Barcode     String?
}

model token {
  id      String  @id @unique
  dbtoken String?
  account String
  dbtime  String?
}

model Orders {
  orderId                String
  orderItemId            String    @id @unique
  account                String
  dateTimeOrderPlaced    String?
  s_salutationCode       String
  s_firstName            String
  s_surname              String
  s_streetName           String
  s_houseNumber          String
  s_houseNumberExtension String?
  s_zipCode              String
  s_city                 String
  s_countryCode          String
  email                  String
  language               String?
  b_salutationCode       String?
  b_firstName            String?
  b_surname              String?
  b_streetName           String?
  b_houseNumber          String?
  b_houseNumberExtension String?
  b_zipCode              String?
  b_city                 String?
  b_countryCode          String?
  b_company              String?
  offerId                String?
  ean                    String?
  title                  String    @db.VarChar(500)
  img                    String?
  url                    String?
  quantity               Int?
  unitPrice              Float?
  commission             Float?
  latestDeliveryDate     DateTime?
  exactDeliveryDate      DateTime?
  expiryDate             DateTime?
  offerCondition         String?
  cancelRequest          String?
  method                 String?
  distributionParty      String?
  fulfilled              String?
  qls_time               DateTime?
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD

model Product {
  id          String            @id @default(uuid())
  ean         String            @unique
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  locations   ProductLocation[]
}

model WarehouseLocation {
  id          String            @id @default(uuid())
  code        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  products    ProductLocation[]
}

model ProductLocation {
  id         String                   @id @default(uuid())
  productId  String
  locationId String
  quantity   Int                      @default(1)
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt
  product    Product                  @relation(fields: [productId], references: [id])
  location   WarehouseLocation        @relation(fields: [locationId], references: [id])
  history    ProductLocationHistory[]

  @@unique([productId, locationId])
}

model ProductLocationHistory {
  id                String           @id @default(uuid())
  recordId          String
  userId            String
  user              User             @relation(fields: [userId], references: [id]) // Add this relation
  action            String
  field             String?
  oldValue          String?
  newValue          String?
  createdAt         DateTime         @default(now())
  ProductLocation   ProductLocation? @relation(fields: [productLocationId], references: [id])
  productLocationId String?

  @@index([recordId])
}
=======
>>>>>>> parent of 868da02 (Warehouse managment)
=======
>>>>>>> parent of 868da02 (Warehouse managment)
=======
>>>>>>> parent of 868da02 (Warehouse managment)
